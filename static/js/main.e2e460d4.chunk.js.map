{"version":3,"sources":["App.js","api_key.js","api_secret.js","serviceWorker.js","index.js"],"names":["unsplash","Unsplash","applicationId","secret","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeMainImage","img","setState","selectedImage","react_default","a","createElement","id","alt","target","src","key","state","searchValue","loading","error","images","event","value","_this2","preventDefault","search","photos","then","toJson","json","results","description","urls","regular","catch","err","_this3","imgs","_this$state","forEach","push","onClick","className","onSubmit","searchValueApplied","onChange","valueChanged","type","name","placeholder","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2e460d4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Unsplash , {toJson} from 'unsplash-js';\nimport './css/style.css';\nimport './css/style_1000.css';\nimport './css/style_800.css';\nimport './css/style_600.css';\nimport './css/style_400.css';\nimport REACT_UNSPLASH_API_KEY from './api_key.js';\nimport REACT_UNSPLASH_API_SECRET from './api_secret.js';\n\nconst unsplash = new Unsplash({\n  applicationId: REACT_UNSPLASH_API_KEY,\n  secret: REACT_UNSPLASH_API_SECRET\n});\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state={\n      searchValue: '',\n      loading:false,\n      error:false,\n      images: [],\n      selectedImage: ''\n    };\n  }\n\n  valueChanged(event){\n    this.setState({\n      searchValue: event.target.value\n    })\n  }\n\n  searchValueApplied(event){\n    event.preventDefault();\n    this.setState({\n      loading:true,\n      error:false,\n      images:[],\n      selectedImage:''\n    });\n    unsplash.search.photos( this.state.searchValue, 1, 100)\n      .then(toJson)\n      .then(json => {\n          this.setState({\n            loading:false,\n            images:json.results,\n            selectedImage: ( <img id=\"images\" \n          alt={json.results[0].description} \n          src={json.results[0].urls.regular} \n          key={json.results[0].id}/>)\n          })\n      })\n      .catch(err => {\n          this.setState({\n            loading:false,\n            error:true\n          })\n      });\n  }\n\n  changeMainImage = img => {\n      this.setState({\n        selectedImage: (<img id=\"images\" \n          alt={img.target.alt} \n          src={img.target.src} \n          key={img.target.id}/>)\n      });\n  }\n\n  render() {\n    const imgs = [];\n    const {searchValue, loading, error, images, selectedImage} = this.state;\n\n    this.state.images.forEach(img=>{\n      imgs.push(\n          <img id=\"images\" \n          alt={img.description} \n          src={img.urls.regular} \n          key={img.id}\n          onClick={this.changeMainImage}/>\n          )\n    })\n\n    return (\n      <div className = \"wrapper\">\n        <div className = \"inputField\">\n          <form onSubmit={(event) => this.searchValueApplied(event)}>\n            <input \n            onChange={(event)=>this.valueChanged(event)}\n            value = {searchValue}\n            type=\"text\" \n            name=\"Search\"\n            placeholder=\"Input search term...\"/>\n          <button\n            id=\"button\" \n            type=\"submit\" \n            value=\"submit\">Search</button>\n          </form>\n        </div>\n        <div className=\"imageGrid\">\n            {loading ? <img id=\"loading\" alt=\"Loading...\" src=\"https://www.zaggle.in/images/loading-951c2859d33608ef454e3bcb3e0d50b2.gif\"/> : \"\"}\n            {error ? <h2>No Images Were Found</h2> : \"\"}\n            {images.length > 0 ?  \n              <div>\n                <div className=\"picture-Big\">\n                  <div id=\"picture-holder\">\n                  {selectedImage}\n                  </div>\n                </div>\n                <ul className=\"bottom-grid\">\n                  <div id=\"slider\">\n                    {imgs}\n                  </div>\n                </ul>\n              </div> : \"\"}\n        </div>\n        <div className=\"queries\">\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const REACT_UNSPLASH_API_KEY = \"714b1455b1faa8ed4f1bf885861e0c5ab2c4ef71c21ecd9eedc96714bd13d5c2\";\r\n\r\nexport default REACT_UNSPLASH_API_KEY;","const REACT_UNSPLASH_API_SECRET = \"bbc0a33cbd1c39ce7f1d7cf2364ba0233fbc8db958da3963b8c52cf5e8668200\";\r\n\r\nexport default REACT_UNSPLASH_API_SECRET;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}